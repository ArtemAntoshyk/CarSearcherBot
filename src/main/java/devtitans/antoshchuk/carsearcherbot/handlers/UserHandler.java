package devtitans.antoshchuk.carsearcherbot.handlers;

import devtitans.antoshchuk.carsearcherbot.service.UserService;
import devtitans.antoshchuk.carsearcherbot.service.message.MessageService;
import devtitans.antoshchuk.carsearcherbot.util.fsm.context.RegistrationContext;
import devtitans.antoshchuk.carsearcherbot.util.fsm.service.RegistrationService;
import devtitans.antoshchuk.carsearcherbot.util.fsm.state.RegistrationEvents;
import devtitans.antoshchuk.carsearcherbot.util.fsm.state.RegistrationStates;
import devtitans.antoshchuk.carsearcherbot.util.keyboard.KeyboardFactory;
import devtitans.antoshchuk.carsearcherbot.util.keyboard.KeyboardLoader;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.statemachine.StateMachine;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.Message;

@Component
public class UserHandler {
    private final RegistrationService registrationService;
    private final UserService userService;
    private final MessageService messageService;
    private final KeyboardFactory keyboardFactory;

    @Autowired
    public UserHandler(RegistrationService registrationService,
                       UserService userService,
                       MessageService messageService,
                       KeyboardFactory keyboardFactory) {
        this.registrationService = registrationService;
        this.userService = userService;
        this.messageService = messageService;
        this.keyboardFactory = keyboardFactory;
    }

    public void userHandler(Message message) {
        if (message.hasContact()) {
            registrationProcess(message.getChatId(), message.getContact().getPhoneNumber(), message);
        } else {
            registrationProcess(message.getChatId(), message.getText(), message);
        }
    }

    private void registrationProcess(Long chatId, String input, Message message) {
        StateMachine<RegistrationStates, RegistrationEvents> machine = registrationService.getUserMachine(chatId);
        RegistrationStates state = machine.getState().getId();

        RegistrationContext context = (RegistrationContext) machine.getExtendedState()
                .getVariables()
                .computeIfAbsent("context", k -> new RegistrationContext());

        switch (state) {
            case START -> {
                registrationService.sendEvent(chatId, RegistrationEvents.START_REGISTRATION);
                messageService.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ –Ü–º'—è‚úçÔ∏è");
            }
            case ENTER_NAME -> {
                String[] fullName = input.trim().split("\\s+");
                if (fullName.length < 2) {
                    messageService.sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ –ü—Ä—ñ–∑–≤–∏—â–µ, —ñ –Ü–º‚Äô—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –Ü–≤–∞–Ω–µ–Ω–∫–æ –ü–µ—Ç—Ä–æ)");
                    return;
                }
                context.setLastName(fullName[0]);
                context.setFirstName(fullName[1]);
                registrationService.sendEvent(chatId, RegistrationEvents.NAME_ENTERED);
                messageService.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—Éüìß");
            }
            case ENTER_EMAIL -> {
                if (!input.contains("@")) {
                    messageService.sendMessage(chatId, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—à—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ üìß");
                    return;
                }
                context.setEmail(input);
                registrationService.sendEvent(chatId, RegistrationEvents.EMAIL_ENTERED);
                messageService.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É‚òéÔ∏è",
                        keyboardFactory.getKeyboard(KeyboardLoader.Keyboard.SHARE_CONTACT));
            }
            case ENTER_PHONE_NUMBER -> {
                if (!input.matches("\\+?\\d{10,15}")) {
                    messageService.sendMessage(chatId, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ ‚òéÔ∏è");
                    return;
                }
                context.setPhone(input);
                registrationService.sendEvent(chatId, RegistrationEvents.PHONE_NUMBER_ENTERED);
                messageService.sendMessage(chatId,
                        "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:\n" +
                                "–ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ –Ü–º'—è: " + context.getLastName() + " " + context.getFirstName() + "\n" +
                                "–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞: " + context.getEmail() + "\n" +
                                "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: " + context.getPhone() + "\n" +
                                "–í—Å–µ –≤—ñ—Ä–Ω–æ?‚¨ÜÔ∏è",
                        keyboardFactory.getKeyboard(KeyboardLoader.Keyboard.SUBMIT_MENU));
            }
            case CONFIRM -> {
                String answer = input;
                if (answer.equals("–¢–∞–∫‚úÖ")) {
                    String username = message.getFrom().getUserName();
                    long id = message.getFrom().getId();
                    userService.registerUser(userService.createUser(context, username, id));
                    messageService.sendMessage(chatId, "‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!", KeyboardLoader.Keyboard.MAIN_MENU);
                } else {
                    messageService.sendMessage(chatId, "‚ùå –î–∞–Ω—ñ –≤—ñ–¥—Ö–∏–ª–µ–Ω—ñ. –ü–æ—á–Ω—ñ–º–æ —Å–ø–æ—á–∞—Ç–∫—É.");
//                    registrationService.sendEvent(chatId, RegistrationEvents.RESTART);
                }
            }
            default -> messageService.sendMessage(chatId, "‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞–Ω. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
        }
    }
}
